#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Binance Otomatik Trading Sistemi

Bu mod√ºl Binance API'sini kullanarak otomatik spot ve futures trading yapar.
Geli≈ümi≈ü pozisyon y√∂netimi ve risk kontrol√º i√ßerir.
"""

import ccxt
import pandas as pd
import numpy as np
import time
import json
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Tuple
import warnings
warnings.filterwarnings('ignore')

class BinanceTrader:
    """
    Binance otomatik trading sƒ±nƒ±fƒ±
    Spot ve Futures i≈ülemlerini destekler
    """
    
    def __init__(self, api_key: str, secret_key: str, testnet: bool = True):
        """
        Binance trader'ƒ± ba≈ülatƒ±r
        
        Args:
            api_key (str): Binance API anahtarƒ±
            secret_key (str): Binance Secret anahtarƒ±
            testnet (bool): Test modu (varsayƒ±lan: True)
        """
        self.api_key = api_key
        self.secret_key = secret_key
        self.testnet = testnet
        
        # Exchange baƒülantƒ±larƒ±
        self.spot_exchange = None
        self.futures_exchange = None
        
        # Trading ayarlarƒ±
        self.default_risk_percent = 2.0  # Portf√∂y√ºn %2'si risk
        self.max_risk_percent = 5.0  # Maksimum %5 risk
        self.min_order_amount = 10.0  # Minimum i≈ülem tutarƒ± (USDT)
        self.max_leverage = 10  # Maksimum kaldƒ±ra√ß
        
        # Pozisyon takibi
        self.current_positions = {}
        self.trading_history = []
        
        # Log dosyasƒ±
        self.log_file = f"trading_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        # Baƒülantƒ±larƒ± ba≈ülat
        self._initialize_exchanges()
        
        print(f"üöÄ Binance Trader ba≈ülatƒ±ldƒ±!")
        print(f"üìä Mod: {'TESTNET' if testnet else 'LIVE TRADING'}")
        print(f"‚ö†Ô∏è Risk Limiti: %{self.default_risk_percent}")
    
    def _initialize_exchanges(self):
        """
        Binance exchange baƒülantƒ±larƒ±nƒ± ba≈ülatƒ±r
        """
        try:
            # Spot Exchange
            self.spot_exchange = ccxt.binance({
                'apiKey': self.api_key,
                'secret': self.secret_key,
                'sandbox': self.testnet,
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'spot'
                }
            })
            
            # Futures Exchange  
            self.futures_exchange = ccxt.binance({
                'apiKey': self.api_key,
                'secret': self.secret_key,
                'sandbox': self.testnet,
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'future'
                }
            })
            
            # Test baƒülantƒ±sƒ±
            self.spot_exchange.load_markets()
            self.futures_exchange.load_markets()
            
            print("‚úÖ Binance API baƒülantƒ±sƒ± ba≈üarƒ±lƒ±!")
            
        except Exception as e:
            print(f"‚ùå Binance API baƒülantƒ± hatasƒ±: {str(e)}")
            raise
    
    def log_message(self, message: str):
        """
        Trading loglarƒ±nƒ± hem ekrana hem dosyaya yazar
        """
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_entry = f"[{timestamp}] {message}"
        
        print(log_entry)
        
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry + '\n')
    
    def get_account_balance(self, exchange_type: str = 'spot') -> Dict:
        """
        Hesap bakiyesini getirir
        
        Args:
            exchange_type (str): 'spot' veya 'futures'
        
        Returns:
            Dict: Bakiye bilgileri
        """
        try:
            exchange = self.spot_exchange if exchange_type == 'spot' else self.futures_exchange
            balance = exchange.fetch_balance()
            
            # USDT bakiyesi
            usdt_balance = balance.get('USDT', {})
            
            return {
                'total': usdt_balance.get('total', 0),
                'free': usdt_balance.get('free', 0),
                'used': usdt_balance.get('used', 0),
                'exchange_type': exchange_type
            }
            
        except Exception as e:
            self.log_message(f"‚ùå Bakiye getirme hatasƒ±: {str(e)}")
            return {'total': 0, 'free': 0, 'used': 0, 'exchange_type': exchange_type}
    
    def get_current_price(self, symbol: str) -> float:
        """
        Mevcut fiyatƒ± getirir
        
        Args:
            symbol (str): Trading √ßifti (√∂rn: BTC/USDT)
        
        Returns:
            float: Mevcut fiyat
        """
        try:
            ticker = self.spot_exchange.fetch_ticker(symbol)
            return float(ticker['last'])
        except Exception as e:
            self.log_message(f"‚ùå Fiyat getirme hatasƒ±: {str(e)}")
            return 0.0
    
    def calculate_position_size(self, symbol: str, entry_price: float, 
                              target_price: float, stop_loss: float,
                              risk_percent: Optional[float] = None,
                              exchange_type: str = 'futures') -> Dict:
        """
        Pozisyon b√ºy√ºkl√ºƒü√ºn√º dinamik olarak hesaplar
        
        Args:
            symbol (str): Trading √ßifti
            entry_price (float): Giri≈ü fiyatƒ±
            target_price (float): Hedef fiyat
            stop_loss (float): Zarar durdur fiyatƒ±
            risk_percent (float): Risk y√ºzdesi (opsiyonel)
            exchange_type (str): Exchange tipi
        
        Returns:
            Dict: Pozisyon hesaplama sonu√ßlarƒ±
        """
        if risk_percent is None:
            risk_percent = self.default_risk_percent
        
        # Risk kontrol√º
        risk_percent = min(risk_percent, self.max_risk_percent)
        
        # Bakiye al
        balance = self.get_account_balance(exchange_type)
        available_balance = balance['free']
        
        if available_balance < self.min_order_amount:
            return {
                'success': False,
                'error': f'Yetersiz bakiye: ${available_balance:.2f}',
                'position_size': 0,
                'risk_amount': 0
            }
        
        # Risk tutarƒ±nƒ± hesapla
        risk_amount = available_balance * (risk_percent / 100)
        
        # Stop loss mesafesini hesapla
        if entry_price > stop_loss:  # Long pozisyon
            stop_distance = entry_price - stop_loss
            direction = 'long'
        else:  # Short pozisyon
            stop_distance = stop_loss - entry_price
            direction = 'short'
        
        # Hedef mesafesi
        if direction == 'long':
            target_distance = target_price - entry_price
        else:
            target_distance = entry_price - target_price
        
        # Risk/Reward oranƒ±
        if target_distance <= 0 or stop_distance <= 0:
            return {
                'success': False,
                'error': 'Ge√ßersiz fiyat seviyeleri',
                'position_size': 0,
                'risk_amount': 0
            }
        
        risk_reward_ratio = target_distance / stop_distance
        
        # Pozisyon b√ºy√ºkl√ºƒü√ºn√º hesapla
        if exchange_type == 'futures':
            # Futures i√ßin kaldƒ±ra√ß kullanarak pozisyon b√ºy√ºkl√ºƒü√º
            leverage = min(self.max_leverage, max(1, int(available_balance / risk_amount)))
            position_value = risk_amount * leverage / (stop_distance / entry_price)
            quantity = position_value / entry_price
        else:
            # Spot i√ßin basit hesaplama
            quantity = risk_amount / stop_distance
            position_value = quantity * entry_price
        
        # Minimum i≈ülem kontrol√º
        if position_value < self.min_order_amount:
            quantity = self.min_order_amount / entry_price
            position_value = self.min_order_amount
            actual_risk = (stop_distance / entry_price) * position_value
        else:
            actual_risk = risk_amount
        
        return {
            'success': True,
            'quantity': quantity,
            'position_value': position_value,
            'risk_amount': actual_risk,
            'risk_percent': (actual_risk / available_balance) * 100,
            'risk_reward_ratio': risk_reward_ratio,
            'direction': direction,
            'leverage': leverage if exchange_type == 'futures' else 1,
            'available_balance': available_balance
        }
    
    def get_current_positions(self, exchange_type: str = 'futures') -> Dict:
        """
        Mevcut pozisyonlarƒ± getirir
        
        Args:
            exchange_type (str): Exchange tipi
        
        Returns:
            Dict: Mevcut pozisyonlar
        """
        try:
            if exchange_type == 'futures':
                positions = self.futures_exchange.fetch_positions()
                active_positions = {}
                
                for pos in positions:
                    if pos['contracts'] != 0:  # Aktif pozisyon
                        symbol = pos['symbol']
                        active_positions[symbol] = {
                            'symbol': symbol,
                            'side': pos['side'],
                            'size': abs(pos['contracts']),
                            'entry_price': pos['entryPrice'],
                            'mark_price': pos['markPrice'],
                            'pnl': pos['unrealizedPnl'],
                            'pnl_percent': pos['percentage']
                        }
                
                return active_positions
            
            else:  # Spot
                balance = self.spot_exchange.fetch_balance()
                spot_positions = {}
                
                for asset, info in balance.items():
                    if asset != 'USDT' and info['total'] > 0:
                        current_price = self.get_current_price(f"{asset}/USDT")
                        value = info['total'] * current_price
                        
                        spot_positions[f"{asset}/USDT"] = {
                            'symbol': f"{asset}/USDT",
                            'side': 'long',
                            'size': info['total'],
                            'entry_price': 0,  # Spot'ta entry price takibi yok
                            'mark_price': current_price,
                            'value': value
                        }
                
                return spot_positions
                
        except Exception as e:
            self.log_message(f"‚ùå Pozisyon getirme hatasƒ±: {str(e)}")
            return {}
    
    def close_position(self, symbol: str, exchange_type: str = 'futures') -> Dict:
        """
        Mevcut pozisyonu kapatƒ±r
        
        Args:
            symbol (str): Trading √ßifti
            exchange_type (str): Exchange tipi
        
        Returns:
            Dict: ƒ∞≈ülem sonucu
        """
        try:
            if exchange_type == 'futures':
                # Futures pozisyonunu kapat
                positions = self.get_current_positions('futures')
                
                if symbol not in positions:
                    return {
                        'success': False,
                        'error': f'{symbol} i√ßin aktif pozisyon bulunamadƒ±'
                    }
                
                position = positions[symbol]
                side = 'sell' if position['side'] == 'long' else 'buy'
                quantity = position['size']
                
                # Market order ile kapat
                order = self.futures_exchange.create_market_order(
                    symbol, side, quantity, None, None, {
                        'reduceOnly': True
                    }
                )
                
                self.log_message(f"‚úÖ {symbol} pozisyonu kapatƒ±ldƒ±: {side} {quantity}")
                
                return {
                    'success': True,
                    'order_id': order['id'],
                    'side': side,
                    'quantity': quantity,
                    'price': order.get('price', 0)
                }
            
            else:  # Spot
                # Spot pozisyonunu sat
                balance = self.spot_exchange.fetch_balance()
                asset = symbol.split('/')[0]
                
                if asset not in balance or balance[asset]['free'] <= 0:
                    return {
                        'success': False,
                        'error': f'{asset} bakiyesi bulunamadƒ±'
                    }
                
                quantity = balance[asset]['free']
                
                order = self.spot_exchange.create_market_order(
                    symbol, 'sell', quantity
                )
                
                self.log_message(f"‚úÖ {symbol} spot pozisyonu satƒ±ldƒ±: {quantity}")
                
                return {
                    'success': True,
                    'order_id': order['id'],
                    'side': 'sell',
                    'quantity': quantity,
                    'price': order.get('price', 0)
                }
                
        except Exception as e:
            self.log_message(f"‚ùå Pozisyon kapatma hatasƒ±: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def open_position(self, symbol: str, side: str, entry_price: float,
                     target_price: float, stop_loss: float,
                     risk_percent: Optional[float] = None,
                     exchange_type: str = 'futures') -> Dict:
        """
        Yeni pozisyon a√ßar
        
        Args:
            symbol (str): Trading √ßifti
            side (str): 'long' veya 'short'
            entry_price (float): Giri≈ü fiyatƒ±
            target_price (float): Hedef fiyat
            stop_loss (float): Zarar durdur
            risk_percent (float): Risk y√ºzdesi
            exchange_type (str): Exchange tipi
        
        Returns:
            Dict: ƒ∞≈ülem sonucu
        """
        try:
            # Pozisyon b√ºy√ºkl√ºƒü√ºn√º hesapla
            size_calc = self.calculate_position_size(
                symbol, entry_price, target_price, stop_loss, 
                risk_percent, exchange_type
            )
            
            if not size_calc['success']:
                return size_calc
            
            quantity = size_calc['quantity']
            
            # Futures i≈ülemi
            if exchange_type == 'futures':
                # Kaldƒ±racƒ± ayarla
                leverage = size_calc['leverage']
                self.futures_exchange.set_leverage(leverage, symbol)
                
                # Market order ile pozisyon a√ß
                order = self.futures_exchange.create_market_order(
                    symbol, 'buy' if side == 'long' else 'sell', quantity
                )
                
                # Stop loss ve take profit emirlerini yerle≈ütir
                self._place_stop_orders(symbol, side, quantity, stop_loss, target_price)
                
            else:  # Spot i≈ülemi
                if side == 'short':
                    return {
                        'success': False,
                        'error': 'Spot trading\'de short pozisyon a√ßƒ±lamaz'
                    }
                
                # Spot satƒ±n alma
                order = self.spot_exchange.create_market_order(
                    symbol, 'buy', quantity
                )
            
            # ƒ∞≈ülemi kaydet
            trade_record = {
                'timestamp': datetime.now().isoformat(),
                'symbol': symbol,
                'side': side,
                'exchange_type': exchange_type,
                'quantity': quantity,
                'entry_price': order.get('price', entry_price),
                'target_price': target_price,
                'stop_loss': stop_loss,
                'risk_amount': size_calc['risk_amount'],
                'risk_percent': size_calc['risk_percent'],
                'order_id': order['id']
            }
            
            self.trading_history.append(trade_record)
            self.current_positions[symbol] = trade_record
            
            self.log_message(f"‚úÖ {symbol} pozisyonu a√ßƒ±ldƒ±:")
            self.log_message(f"   Y√∂n: {side.upper()}")
            self.log_message(f"   Miktar: {quantity:.6f}")
            self.log_message(f"   Giri≈ü: ${entry_price:.6f}")
            self.log_message(f"   Hedef: ${target_price:.6f}")
            self.log_message(f"   Stop: ${stop_loss:.6f}")
            self.log_message(f"   Risk: ${size_calc['risk_amount']:.2f} (%{size_calc['risk_percent']:.1f})")
            
            return {
                'success': True,
                'order_id': order['id'],
                'quantity': quantity,
                'entry_price': order.get('price', entry_price),
                'trade_record': trade_record
            }
            
        except Exception as e:
            self.log_message(f"‚ùå Pozisyon a√ßma hatasƒ±: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _place_stop_orders(self, symbol: str, side: str, quantity: float,
                          stop_loss: float, target_price: float):
        """
        Stop loss ve take profit emirlerini yerle≈ütirir
        """
        try:
            # Stop loss emri
            stop_side = 'sell' if side == 'long' else 'buy'
            
            self.futures_exchange.create_order(
                symbol, 'stop_market', stop_side, quantity, None, None, {
                    'stopPrice': stop_loss,
                    'reduceOnly': True
                }
            )
            
            # Take profit emri
            self.futures_exchange.create_order(
                symbol, 'limit', stop_side, quantity, target_price, None, {
                    'reduceOnly': True
                }
            )
            
            self.log_message(f"‚úÖ Stop emirleri yerle≈ütirildi: SL ${stop_loss:.6f}, TP ${target_price:.6f}")
            
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è Stop emirleri yerle≈ütirilemedi: {str(e)}")
    
    def reverse_position(self, symbol: str, new_side: str, entry_price: float,
                        target_price: float, stop_loss: float,
                        risk_percent: Optional[float] = None,
                        exchange_type: str = 'futures') -> Dict:
        """
        Mevcut pozisyonu kapatƒ±p tersine √ßevirir
        
        Args:
            symbol (str): Trading √ßifti
            new_side (str): Yeni pozisyon y√∂n√º
            entry_price (float): Yeni giri≈ü fiyatƒ±
            target_price (float): Yeni hedef fiyat
            stop_loss (float): Yeni stop loss
            risk_percent (float): Risk y√ºzdesi
            exchange_type (str): Exchange tipi
        
        Returns:
            Dict: ƒ∞≈ülem sonucu
        """
        try:
            # Mevcut pozisyonlarƒ± kontrol et
            current_positions = self.get_current_positions(exchange_type)
            
            if symbol in current_positions:
                current_side = current_positions[symbol]['side']
                
                if current_side == new_side:
                    return {
                        'success': False,
                        'error': f'Zaten {new_side} pozisyondasƒ±nƒ±z'
                    }
                
                self.log_message(f"üîÑ {symbol} pozisyonu tersine √ßevriliyor: {current_side} -> {new_side}")
                
                # 1. Mevcut pozisyonu kapat
                close_result = self.close_position(symbol, exchange_type)
                
                if not close_result['success']:
                    return {
                        'success': False,
                        'error': f"Pozisyon kapatƒ±lamadƒ±: {close_result['error']}"
                    }
                
                # Kƒ±sa bir bekleme
                time.sleep(1)
                
                # 2. Yeni pozisyon a√ß
                open_result = self.open_position(
                    symbol, new_side, entry_price, target_price, 
                    stop_loss, risk_percent, exchange_type
                )
                
                if open_result['success']:
                    self.log_message(f"‚úÖ {symbol} pozisyonu ba≈üarƒ±yla tersine √ßevrildi!")
                
                return open_result
            
            else:
                # Mevcut pozisyon yok, direkt yeni pozisyon a√ß
                return self.open_position(
                    symbol, new_side, entry_price, target_price,
                    stop_loss, risk_percent, exchange_type
                )
                
        except Exception as e:
            self.log_message(f"‚ùå Pozisyon tersine √ßevirme hatasƒ±: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def execute_signal(self, signal: Dict) -> Dict:
        """
        Trading sinyalini i≈üler ve gerekli i≈ülemleri yapar
        
        Args:
            signal (Dict): Trading sinyali
            
        Signal format:
        {
            'symbol': 'BTC/USDT',
            'action': 'long' | 'short' | 'close',
            'entry_price': float,
            'target_price': float,
            'stop_loss': float,
            'confidence': float,
            'exchange_type': 'spot' | 'futures',
            'risk_percent': float (optional)
        }
        
        Returns:
            Dict: ƒ∞≈ülem sonucu
        """
        try:
            symbol = signal['symbol']
            action = signal['action']
            exchange_type = signal.get('exchange_type', 'futures')
            
            self.log_message(f"üì° Sinyal alƒ±ndƒ±: {symbol} - {action.upper()}")
            
            if action == 'close':
                # Pozisyonu kapat
                return self.close_position(symbol, exchange_type)
            
            elif action in ['long', 'short']:
                # Pozisyon kontrol√º ve tersine √ßevirme
                return self.reverse_position(
                    symbol=symbol,
                    new_side=action,
                    entry_price=signal['entry_price'],
                    target_price=signal['target_price'],
                    stop_loss=signal['stop_loss'],
                    risk_percent=signal.get('risk_percent'),
                    exchange_type=exchange_type
                )
            
            else:
                return {
                    'success': False,
                    'error': f'Ge√ßersiz sinyal aksiyonu: {action}'
                }
                
        except Exception as e:
            self.log_message(f"‚ùå Sinyal i≈üleme hatasƒ±: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def get_portfolio_summary(self) -> Dict:
        """
        Portf√∂y √∂zetini getirir
        
        Returns:
            Dict: Portf√∂y √∂zeti
        """
        try:
            # Spot bakiye
            spot_balance = self.get_account_balance('spot')
            
            # Futures bakiye
            futures_balance = self.get_account_balance('futures')
            
            # Aktif pozisyonlar
            spot_positions = self.get_current_positions('spot')
            futures_positions = self.get_current_positions('futures')
            
            # Toplam PnL hesapla
            total_pnl = 0
            for pos in futures_positions.values():
                total_pnl += pos.get('pnl', 0)
            
            # Spot deƒüeri
            spot_value = 0
            for pos in spot_positions.values():
                spot_value += pos.get('value', 0)
            
            return {
                'spot_balance': spot_balance,
                'futures_balance': futures_balance,
                'spot_positions': spot_positions,
                'futures_positions': futures_positions,
                'total_spot_value': spot_value,
                'total_futures_pnl': total_pnl,
                'total_positions': len(spot_positions) + len(futures_positions),
                'trading_history_count': len(self.trading_history)
            }
            
        except Exception as e:
            self.log_message(f"‚ùå Portf√∂y √∂zeti hatasƒ±: {str(e)}")
            return {}
    
    def save_trading_data(self, filename: Optional[str] = None):
        """
        Trading verilerini dosyaya kaydeder
        """
        if filename is None:
            filename = f"trading_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            data = {
                'portfolio_summary': self.get_portfolio_summary(),
                'trading_history': self.trading_history,
                'current_positions': self.current_positions,
                'settings': {
                    'default_risk_percent': self.default_risk_percent,
                    'max_risk_percent': self.max_risk_percent,
                    'min_order_amount': self.min_order_amount,
                    'max_leverage': self.max_leverage,
                    'testnet': self.testnet
                },
                'export_time': datetime.now().isoformat()
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            self.log_message(f"üíæ Trading verileri kaydedildi: {filename}")
            
        except Exception as e:
            self.log_message(f"‚ùå Veri kaydetme hatasƒ±: {str(e)}")

def main():
    """
    Test fonksiyonu
    """
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                    ‚ïë
‚ïë               üöÄ BINANCE OTOMATIK TRADING Sƒ∞STEMƒ∞ üöÄ             ‚ïë
‚ïë                                                                    ‚ïë
‚ïë  Bu sistem LSTM tahminlerinizi Binance'de otomatik i≈ülemlere      ‚ïë
‚ïë  d√∂n√º≈üt√ºr√ºr. Spot ve Futures trading destekler.                   ‚ïë
‚ïë                                                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")
    
    print("‚ö†Ô∏è BU Sƒ∞STEM GER√áEK PARA KULLANIR!")
    print("üí° ƒ∞lk testlerinizi mutlaka TESTNET modunda yapƒ±n!")
    
    # API bilgileri
    api_key = input("\nüîë Binance API Key: ").strip()
    secret_key = input("üîê Binance Secret Key: ").strip()
    
    use_testnet = input("\nüß™ Testnet kullanƒ±lsƒ±n mƒ±? (y/n, varsayƒ±lan: y): ").strip().lower()
    testnet = use_testnet != 'n'
    
    try:
        # Trader olu≈ütur
        trader = BinanceTrader(api_key, secret_key, testnet)
        
        # Portf√∂y durumunu g√∂ster
        portfolio = trader.get_portfolio_summary()
        
        print(f"\nüìä PORTF√ñY DURUMU:")
        print(f"üí∞ Spot USDT: ${portfolio['spot_balance']['free']:.2f}")
        print(f"üöÄ Futures USDT: ${portfolio['futures_balance']['free']:.2f}")
        print(f"üìà Aktif Pozisyonlar: {portfolio['total_positions']}")
        
        # √ñrnek sinyal test et
        test_symbol = input("\nüìä Test trading √ßifti (√∂rn: BTC/USDT): ").strip()
        if not test_symbol:
            test_symbol = "BTC/USDT"
        
        current_price = trader.get_current_price(test_symbol)
        print(f"üíµ {test_symbol} mevcut fiyat: ${current_price:.6f}")
        
        # √ñrnek trading sinyali
        example_signal = {
            'symbol': test_symbol,
            'action': 'long',
            'entry_price': current_price,
            'target_price': current_price * 1.02,  # %2 hedef
            'stop_loss': current_price * 0.98,     # %2 stop
            'confidence': 75.0,
            'exchange_type': 'futures',
            'risk_percent': 1.0
        }
        
        print(f"\nüîÆ √ñrnek sinyal:")
        print(f"   Sembol: {example_signal['symbol']}")
        print(f"   Aksiyon: {example_signal['action'].upper()}")
        print(f"   Giri≈ü: ${example_signal['entry_price']:.6f}")
        print(f"   Hedef: ${example_signal['target_price']:.6f}")
        print(f"   Stop: ${example_signal['stop_loss']:.6f}")
        
        execute_test = input("\n‚úÖ Bu sinyali test etmek ister misiniz? (y/n): ").strip().lower()
        
        if execute_test == 'y':
            result = trader.execute_signal(example_signal)
            
            if result['success']:
                print("‚úÖ Test i≈ülemi ba≈üarƒ±lƒ±!")
                print(f"üìã Order ID: {result['order_id']}")
            else:
                print(f"‚ùå Test i≈ülemi ba≈üarƒ±sƒ±z: {result['error']}")
        
        # Verileri kaydet
        trader.save_trading_data()
        
    except Exception as e:
        print(f"\n‚ùå Sistem hatasƒ±: {str(e)}")
        print("üí° API anahtarlarƒ±nƒ±zƒ± ve internet baƒülantƒ±nƒ±zƒ± kontrol edin.")

if __name__ == "__main__":
    main() 